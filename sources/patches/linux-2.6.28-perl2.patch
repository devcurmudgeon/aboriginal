From: Rob Landley <rob@landley.net>

Remove perl from make headers_install by replacing a perl script (doing
a simple regex search and replace) with a smaller and faster shell script
implementation.  The new shell script is a single for loop calling sed and
piping its output through unifdef to produce the target file.

Changes from previous version: Added help text and a check for the right
number of arguments.  Removed unused ARCH input from script and makefile
(the makefile incorporates ARCH into INDIR, so the script doesn't care),
fixed a whitespace mistake in the makefile pointed out by Sam Ravnborg,
changed the shebang to #!/bin/sh and tested under bash and dash.


put_changelog_here

Signed-off-by: Rob Landley <rob@landley.net>
---

 scripts/Makefile.headersinst |    6 ++--
 scripts/headers_install.pl   |   46 ---------------------------------
 scripts/headers_install.sh   |   36 +++++++++++++++++++++++++
 3 files changed, 39 insertions(+), 49 deletions(-)

diff -ruN linux-2.6.28/scripts/headers_install.sh linux-2.6.28-new/scripts/headers_install.sh
--- linux-2.6.28/scripts/headers_install.sh	1969-12-31 18:00:00.000000000 -0600
+++ linux-2.6.28-new/scripts/headers_install.sh	2009-01-02 22:35:17.000000000 -0600
@@ -0,0 +1,36 @@
+#!/bin/sh
+
+if [ $# -lt 2 ]
+then
+	echo "Usage: headers_install.sh INDIR OUTDIR [FILES...]
+	echo
+	echo "Prepares kernel header files for use by user space, by removing"
+	echo "all compiler.h definitions and #includes, and removing any"
+	echo "#ifdef __KERNEL__ sections."
+	echo
+	echo "INDIR:  directory to read each kernel header FILE from."
+	echo "OUTDIR: directory to write each userspace header FILE to."
+	echo "FILES:  list of header files to operate on."
+
+	exit 1
+fi
+
+# Grab arguments
+
+INDIR="$1"
+shift
+OUTDIR="$1"
+shift
+
+# Iterate through files listed on command line
+
+for i in "$@"
+do
+	sed -r \
+		-e 's/([ \t(])(__user|__force|__iomem)[ \t]/\1/g' \
+		-e 's/__attribute_const__([ \t]|$)/\1/g' \
+		-e 's@^#include <linux/compiler.h>@@' "$INDIR/$i" |
+	scripts/unifdef -U__KERNEL__ - > "$OUTDIR/$i"
+done
+
+exit 0
diff -ruN linux-2.6.28/scripts/Makefile.headersinst linux-2.6.28-new/scripts/Makefile.headersinst
--- linux-2.6.28/scripts/Makefile.headersinst	2008-12-24 17:26:37.000000000 -0600
+++ linux-2.6.28-new/scripts/Makefile.headersinst	2009-01-02 22:36:42.000000000 -0600
@@ -44,8 +44,8 @@
 quiet_cmd_install = INSTALL $(printdir) ($(words $(all-files))\
                             file$(if $(word 2, $(all-files)),s))
       cmd_install = \
-        $(PERL) $< $(srctree)/$(obj) $(install) $(SRCARCH) $(header-y); \
-        $(PERL) $< $(objtree)/$(obj) $(install) $(SRCARCH) $(objhdr-y); \
+      $(CONFIG_SHELL) $< $(srctree)/$(obj) $(install) $(header-y); \
+      $(CONFIG_SHELL) $< $(objtree)/$(obj) $(install) $(objhdr-y); \
         touch $@
 
 quiet_cmd_remove = REMOVE  $(unwanted)
@@ -64,7 +64,7 @@
 	@:
 
 targets += $(install-file)
-$(install-file): scripts/headers_install.pl $(input-files) FORCE
+$(install-file): scripts/headers_install.sh $(input-files) FORCE
 	$(if $(unwanted),$(call cmd,remove),)
 	$(if $(wildcard $(dir $@)),,$(shell mkdir -p $(dir $@)))
 	$(call if_changed,install)
diff -ruN linux-2.6.28/scripts/headers_install.pl linux-2.6.28-new/scripts/headers_install.pl
--- linux-2.6.28/scripts/headers_install.pl	2008-12-24 17:26:37.000000000 -0600
+++ linux-2.6.28-new/scripts/headers_install.pl	1969-12-31 18:00:00.000000000 -0600
@@ -1,46 +0,0 @@
-#!/usr/bin/perl -w
-#
-# headers_install prepare the listed header files for use in
-# user space and copy the files to their destination.
-#
-# Usage: headers_install.pl readdir installdir arch [files...]
-# readdir:    dir to open files
-# installdir: dir to install the files
-# arch:       current architecture
-#             arch is used to force a reinstallation when the arch
-#             changes because kbuild then detect a command line change.
-# files:      list of files to check
-#
-# Step in preparation for users space:
-# 1) Drop all use of compiler.h definitions
-# 2) Drop include of compiler.h
-# 3) Drop all sections defined out by __KERNEL__ (using unifdef)
-
-use strict;
-
-my ($readdir, $installdir, $arch, @files) = @ARGV;
-
-my $unifdef = "scripts/unifdef -U__KERNEL__";
-
-foreach my $file (@files) {
-	local *INFILE;
-	local *OUTFILE;
-	my $tmpfile = "$installdir/$file.tmp";
-	open(INFILE, "<$readdir/$file")
-		or die "$readdir/$file: $!\n";
-	open(OUTFILE, ">$tmpfile") or die "$tmpfile: $!\n";
-	while (my $line = <INFILE>) {
-		$line =~ s/([\s(])__user\s/$1/g;
-		$line =~ s/([\s(])__force\s/$1/g;
-		$line =~ s/([\s(])__iomem\s/$1/g;
-		$line =~ s/\s__attribute_const__\s/ /g;
-		$line =~ s/\s__attribute_const__$//g;
-		$line =~ s/^#include <linux\/compiler.h>//;
-		printf OUTFILE "%s", $line;
-	}
-	close OUTFILE;
-	close INFILE;
-	system $unifdef . " $tmpfile > $installdir/$file";
-	unlink $tmpfile;
-}
-exit 0;
